
display_output_animation_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f9c  08002f9c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002f9c  08002f9c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f9c  08002f9c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000014  08002fb8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08002fb8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007364  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015c2  00000000  00000000  000273a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00028968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016a51  00000000  00000000  00029148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000095c6  00000000  00000000  0003fb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00081a92  00000000  00000000  0004915f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000cabf1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000738  00000000  00000000  000cac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f24  00000000  00000000  000cb380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080027dc 	.word	0x080027dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080027dc 	.word	0x080027dc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe53 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f86f 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8e1 	bl	8000320 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8b1 	bl	80002c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000162:	f000 f93d 	bl	80003e0 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8000166:	f000 fd3f 	bl	8000be8 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 800016a:	f000 fd47 	bl	8000bfc <ssd1306_Clear>
  ssd1306_SetColor(White);
 800016e:	2001      	movs	r0, #1
 8000170:	f000 f926 	bl	80003c0 <ssd1306_SetColor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    ssd1306_Clear();
 8000174:	f000 fd42 	bl	8000bfc <ssd1306_Clear>
	    ssd1306_SetCursor(0, 0);
 8000178:	2100      	movs	r1, #0
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fd1c 	bl	8000bb8 <ssd1306_SetCursor>
	    ssd1306_WriteString("Borsuk Valentyn", Font_7x10);
 8000180:	4b2b      	ldr	r3, [pc, #172]	; (8000230 <main+0xe4>)
 8000182:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000186:	482b      	ldr	r0, [pc, #172]	; (8000234 <main+0xe8>)
 8000188:	f000 fcf0 	bl	8000b6c <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 800018c:	f000 f9fe 	bl	800058c <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 8000190:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000194:	f000 fe94 	bl	8000ec0 <HAL_Delay>

	    ssd1306_Clear();
 8000198:	f000 fd30 	bl	8000bfc <ssd1306_Clear>
	    ssd1306_SetCursor(0, 0);
 800019c:	2100      	movs	r1, #0
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fd0a 	bl	8000bb8 <ssd1306_SetCursor>
	    ssd1306_DrawLine(0, 32, 127, 32);
 80001a4:	2320      	movs	r3, #32
 80001a6:	227f      	movs	r2, #127	; 0x7f
 80001a8:	2120      	movs	r1, #32
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 fa8e 	bl	80006cc <ssd1306_DrawLine>
	    ssd1306_UpdateScreen();
 80001b0:	f000 f9ec 	bl	800058c <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 80001b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001b8:	f000 fe82 	bl	8000ec0 <HAL_Delay>

	    ssd1306_Clear();
 80001bc:	f000 fd1e 	bl	8000bfc <ssd1306_Clear>
	    ssd1306_SetCursor(0, 0);
 80001c0:	2100      	movs	r1, #0
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 fcf8 	bl	8000bb8 <ssd1306_SetCursor>
	    ssd1306_DrawCircle(64, 32, 30);
 80001c8:	221e      	movs	r2, #30
 80001ca:	2120      	movs	r1, #32
 80001cc:	2040      	movs	r0, #64	; 0x40
 80001ce:	f000 fb50 	bl	8000872 <ssd1306_DrawCircle>
	    ssd1306_UpdateScreen();
 80001d2:	f000 f9db 	bl	800058c <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 80001d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001da:	f000 fe71 	bl	8000ec0 <HAL_Delay>

	    ssd1306_Clear();
 80001de:	f000 fd0d 	bl	8000bfc <ssd1306_Clear>
	    ssd1306_SetCursor(0, 0);
 80001e2:	2100      	movs	r1, #0
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 fce7 	bl	8000bb8 <ssd1306_SetCursor>
        ssd1306_DrawTriangle(32, 64 - 10, 64, 64 - 50, 96, 64 - 10);
 80001ea:	2336      	movs	r3, #54	; 0x36
 80001ec:	9301      	str	r3, [sp, #4]
 80001ee:	2360      	movs	r3, #96	; 0x60
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	230e      	movs	r3, #14
 80001f4:	2240      	movs	r2, #64	; 0x40
 80001f6:	2136      	movs	r1, #54	; 0x36
 80001f8:	2020      	movs	r0, #32
 80001fa:	f000 fb09 	bl	8000810 <ssd1306_DrawTriangle>
	    ssd1306_UpdateScreen();
 80001fe:	f000 f9c5 	bl	800058c <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 8000202:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000206:	f000 fe5b 	bl	8000ec0 <HAL_Delay>

	    ssd1306_Clear();
 800020a:	f000 fcf7 	bl	8000bfc <ssd1306_Clear>
	    ssd1306_SetCursor(0, 0);
 800020e:	2100      	movs	r1, #0
 8000210:	2000      	movs	r0, #0
 8000212:	f000 fcd1 	bl	8000bb8 <ssd1306_SetCursor>
        ssd1306_DrawRectangle(32, 10, 96, 50);
 8000216:	2332      	movs	r3, #50	; 0x32
 8000218:	2260      	movs	r2, #96	; 0x60
 800021a:	210a      	movs	r1, #10
 800021c:	2020      	movs	r0, #32
 800021e:	f000 f979 	bl	8000514 <ssd1306_DrawRectangle>
	    ssd1306_UpdateScreen();
 8000222:	f000 f9b3 	bl	800058c <ssd1306_UpdateScreen>
	    HAL_Delay(2000);
 8000226:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800022a:	f000 fe49 	bl	8000ec0 <HAL_Delay>
	    ssd1306_Clear();
 800022e:	e7a1      	b.n	8000174 <main+0x28>
 8000230:	20000000 	.word	0x20000000
 8000234:	080027f4 	.word	0x080027f4

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fac0 	bl	80027cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025a:	2301      	movs	r3, #1
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000276:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0318 	add.w	r3, r7, #24
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fe83 	bl	8001f8c <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028c:	f000 f876 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2302      	movs	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f8f0 	bl	8002490 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b6:	f000 f861 	bl	800037c <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <MX_I2C1_Init+0x50>)
 80002ca:	4a13      	ldr	r2, [pc, #76]	; (8000318 <MX_I2C1_Init+0x54>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_I2C1_Init+0x50>)
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_I2C1_Init+0x58>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_I2C1_Init+0x50>)
 80002e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <MX_I2C1_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_I2C1_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <MX_I2C1_Init+0x50>)
 8000302:	f001 f869 	bl	80013d8 <HAL_I2C_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800030c:	f000 f836 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000030 	.word	0x20000030
 8000318:	40005400 	.word	0x40005400
 800031c:	000186a0 	.word	0x000186a0

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_GPIO_Init+0x58>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a13      	ldr	r2, [pc, #76]	; (8000378 <MX_GPIO_Init+0x58>)
 800032c:	f043 0320 	orr.w	r3, r3, #32
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_GPIO_Init+0x58>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0320 	and.w	r3, r3, #32
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_GPIO_Init+0x58>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <MX_GPIO_Init+0x58>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_GPIO_Init+0x58>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_GPIO_Init+0x58>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <MX_GPIO_Init+0x58>)
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_GPIO_Init+0x58>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0308 	and.w	r3, r3, #8
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	e7fe      	b.n	8000384 <Error_Handler+0x8>

08000386 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
 800038a:	2380      	movs	r3, #128	; 0x80
 800038c:	4618      	mov	r0, r3
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
 8000398:	2340      	movs	r3, #64	; 0x40
 800039a:	4618      	mov	r0, r3
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <ssd1306_GetWidth>:
/* CODE END Private functions */


/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 80003a6:	2380      	movs	r3, #128	; 0x80
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <ssd1306_GetHeight>:


uint16_t ssd1306_GetHeight(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 80003b4:	2340      	movs	r3, #64	; 0x40
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
	...

080003c0 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 80003ca:	4a04      	ldr	r2, [pc, #16]	; (80003dc <ssd1306_SetColor+0x1c>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	7153      	strb	r3, [r2, #5]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000084 	.word	0x20000084

080003e0 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80003e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e8:	2205      	movs	r2, #5
 80003ea:	2178      	movs	r1, #120	; 0x78
 80003ec:	4846      	ldr	r0, [pc, #280]	; (8000508 <ssd1306_Init+0x128>)
 80003ee:	f001 fa31 	bl	8001854 <HAL_I2C_IsDeviceReady>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 80003f8:	4b44      	ldr	r3, [pc, #272]	; (800050c <ssd1306_Init+0x12c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	e07f      	b.n	8000502 <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 8000402:	2064      	movs	r0, #100	; 0x64
 8000404:	f000 fd5c 	bl	8000ec0 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8000408:	20ae      	movs	r0, #174	; 0xae
 800040a:	f000 fc03 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800040e:	20d5      	movs	r0, #213	; 0xd5
 8000410:	f000 fc00 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8000414:	20f0      	movs	r0, #240	; 0xf0
 8000416:	f000 fbfd 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 800041a:	20a8      	movs	r0, #168	; 0xa8
 800041c:	f000 fbfa 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8000420:	f7ff ffb8 	bl	8000394 <height>
 8000424:	4603      	mov	r3, r0
 8000426:	b2db      	uxtb	r3, r3
 8000428:	3b01      	subs	r3, #1
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fbf1 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8000432:	20d3      	movs	r0, #211	; 0xd3
 8000434:	f000 fbee 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8000438:	2000      	movs	r0, #0
 800043a:	f000 fbeb 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 800043e:	2040      	movs	r0, #64	; 0x40
 8000440:	f000 fbe8 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8000444:	208d      	movs	r0, #141	; 0x8d
 8000446:	f000 fbe5 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 800044a:	2014      	movs	r0, #20
 800044c:	f000 fbe2 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8000450:	2020      	movs	r0, #32
 8000452:	f000 fbdf 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8000456:	2000      	movs	r0, #0
 8000458:	f000 fbdc 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 800045c:	20a0      	movs	r0, #160	; 0xa0
 800045e:	f000 fbd9 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8000462:	20c0      	movs	r0, #192	; 0xc0
 8000464:	f000 fbd6 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8000468:	20da      	movs	r0, #218	; 0xda
 800046a:	f000 fbd3 	bl	8000c14 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 800046e:	4b28      	ldr	r3, [pc, #160]	; (8000510 <ssd1306_Init+0x130>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d103      	bne.n	800047e <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 8000476:	2012      	movs	r0, #18
 8000478:	f000 fbcc 	bl	8000c14 <ssd1306_WriteCommand>
 800047c:	e006      	b.n	800048c <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <ssd1306_Init+0x130>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d102      	bne.n	800048c <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 8000486:	2002      	movs	r0, #2
 8000488:	f000 fbc4 	bl	8000c14 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 800048c:	2081      	movs	r0, #129	; 0x81
 800048e:	f000 fbc1 	bl	8000c14 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <ssd1306_Init+0x130>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d103      	bne.n	80004a2 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 800049a:	20cf      	movs	r0, #207	; 0xcf
 800049c:	f000 fbba 	bl	8000c14 <ssd1306_WriteCommand>
 80004a0:	e006      	b.n	80004b0 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80004a2:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <ssd1306_Init+0x130>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d102      	bne.n	80004b0 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 80004aa:	208f      	movs	r0, #143	; 0x8f
 80004ac:	f000 fbb2 	bl	8000c14 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 80004b0:	20d9      	movs	r0, #217	; 0xd9
 80004b2:	f000 fbaf 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 80004b6:	20f1      	movs	r0, #241	; 0xf1
 80004b8:	f000 fbac 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 80004bc:	20db      	movs	r0, #219	; 0xdb
 80004be:	f000 fba9 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 80004c2:	2040      	movs	r0, #64	; 0x40
 80004c4:	f000 fba6 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 80004c8:	20a4      	movs	r0, #164	; 0xa4
 80004ca:	f000 fba3 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 80004ce:	20a6      	movs	r0, #166	; 0xa6
 80004d0:	f000 fba0 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 80004d4:	202e      	movs	r0, #46	; 0x2e
 80004d6:	f000 fb9d 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 80004da:	20af      	movs	r0, #175	; 0xaf
 80004dc:	f000 fb9a 	bl	8000c14 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <ssd1306_Init+0x12c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <ssd1306_Init+0x12c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <ssd1306_Init+0x12c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 80004f2:	f000 fb83 	bl	8000bfc <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80004f6:	f000 f849 	bl	800058c <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <ssd1306_Init+0x12c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 8000500:	2301      	movs	r3, #1
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000030 	.word	0x20000030
 800050c:	20000084 	.word	0x20000084
 8000510:	2000048c 	.word	0x2000048c

08000514 <ssd1306_DrawRectangle>:
		SSD1306_Buffer[i] = (SSD1306.Color == Black) ? 0x00 : 0xFF;
	}
}

void ssd1306_DrawRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4604      	mov	r4, r0
 800051c:	4608      	mov	r0, r1
 800051e:	4611      	mov	r1, r2
 8000520:	461a      	mov	r2, r3
 8000522:	4623      	mov	r3, r4
 8000524:	80fb      	strh	r3, [r7, #6]
 8000526:	4603      	mov	r3, r0
 8000528:	80bb      	strh	r3, [r7, #4]
 800052a:	460b      	mov	r3, r1
 800052c:	807b      	strh	r3, [r7, #2]
 800052e:	4613      	mov	r3, r2
 8000530:	803b      	strh	r3, [r7, #0]
    ssd1306_DrawLine(x0, y0, x1, y0);
 8000532:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000536:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800053a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800053e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000542:	f000 f8c3 	bl	80006cc <ssd1306_DrawLine>
    ssd1306_DrawLine(x1, y0, x1, y1);
 8000546:	f9b7 3000 	ldrsh.w	r3, [r7]
 800054a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800054e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000552:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000556:	f000 f8b9 	bl	80006cc <ssd1306_DrawLine>
    ssd1306_DrawLine(x1, y1, x0, y1);
 800055a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800055e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000562:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000566:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800056a:	f000 f8af 	bl	80006cc <ssd1306_DrawLine>
    ssd1306_DrawLine(x0, y1, x0, y0);
 800056e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000576:	f9b7 1000 	ldrsh.w	r1, [r7]
 800057a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800057e:	f000 f8a5 	bl	80006cc <ssd1306_DrawLine>
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
	...

0800058c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 8000592:	2300      	movs	r3, #0
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	e019      	b.n	80005cc <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	3b50      	subs	r3, #80	; 0x50
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fb38 	bl	8000c14 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fb35 	bl	8000c14 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 80005aa:	2010      	movs	r0, #16
 80005ac:	f000 fb32 	bl	8000c14 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	01db      	lsls	r3, r3, #7
 80005b4:	4a09      	ldr	r2, [pc, #36]	; (80005dc <ssd1306_UpdateScreen+0x50>)
 80005b6:	189c      	adds	r4, r3, r2
 80005b8:	f7ff fee5 	bl	8000386 <width>
 80005bc:	4603      	mov	r3, r0
 80005be:	4619      	mov	r1, r3
 80005c0:	4620      	mov	r0, r4
 80005c2:	f000 fb3f 	bl	8000c44 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	3301      	adds	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b07      	cmp	r3, #7
 80005d0:	d9e2      	bls.n	8000598 <ssd1306_UpdateScreen+0xc>
	}
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	2000008c 	.word	0x2000008c

080005e0 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 80005f0:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <ssd1306_DrawPixel+0xe4>)
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	73fb      	strb	r3, [r7, #15]


	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	b29c      	uxth	r4, r3
 80005fa:	f7ff fed2 	bl	80003a2 <ssd1306_GetWidth>
 80005fe:	4603      	mov	r3, r0
 8000600:	429c      	cmp	r4, r3
 8000602:	d25a      	bcs.n	80006ba <ssd1306_DrawPixel+0xda>
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	b29c      	uxth	r4, r3
 8000608:	f7ff fed2 	bl	80003b0 <ssd1306_GetHeight>
 800060c:	4603      	mov	r3, r0
 800060e:	429c      	cmp	r4, r3
 8000610:	d253      	bcs.n	80006ba <ssd1306_DrawPixel+0xda>
		return;
	}


	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <ssd1306_DrawPixel+0xe4>)
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	73fb      	strb	r3, [r7, #15]
	}


	// Draw in the right color
	if (color == White)
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d121      	bne.n	8000672 <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 800062e:	79fc      	ldrb	r4, [r7, #7]
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b2dd      	uxtb	r5, r3
 8000636:	462e      	mov	r6, r5
 8000638:	f7ff fea5 	bl	8000386 <width>
 800063c:	4603      	mov	r3, r0
 800063e:	4618      	mov	r0, r3
 8000640:	4603      	mov	r3, r0
 8000642:	fb06 f303 	mul.w	r3, r6, r3
 8000646:	4423      	add	r3, r4
 8000648:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <ssd1306_DrawPixel+0xe8>)
 800064a:	5cd3      	ldrb	r3, [r2, r3]
 800064c:	b25a      	sxtb	r2, r3
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	f003 0307 	and.w	r3, r3, #7
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	b25b      	sxtb	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b259      	sxtb	r1, r3
 8000660:	79fa      	ldrb	r2, [r7, #7]
 8000662:	462b      	mov	r3, r5
 8000664:	fb00 f303 	mul.w	r3, r0, r3
 8000668:	4413      	add	r3, r2
 800066a:	b2c9      	uxtb	r1, r1
 800066c:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <ssd1306_DrawPixel+0xe8>)
 800066e:	54d1      	strb	r1, [r2, r3]
 8000670:	e024      	b.n	80006bc <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8000672:	79fc      	ldrb	r4, [r7, #7]
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	08db      	lsrs	r3, r3, #3
 8000678:	b2dd      	uxtb	r5, r3
 800067a:	462e      	mov	r6, r5
 800067c:	f7ff fe83 	bl	8000386 <width>
 8000680:	4603      	mov	r3, r0
 8000682:	4618      	mov	r0, r3
 8000684:	4603      	mov	r3, r0
 8000686:	fb06 f303 	mul.w	r3, r6, r3
 800068a:	4423      	add	r3, r4
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <ssd1306_DrawPixel+0xe8>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	b25a      	sxtb	r2, r3
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	2101      	movs	r1, #1
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	b25b      	sxtb	r3, r3
 80006a0:	43db      	mvns	r3, r3
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	4013      	ands	r3, r2
 80006a6:	b259      	sxtb	r1, r3
 80006a8:	79fa      	ldrb	r2, [r7, #7]
 80006aa:	462b      	mov	r3, r5
 80006ac:	fb00 f303 	mul.w	r3, r0, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	b2c9      	uxtb	r1, r1
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <ssd1306_DrawPixel+0xe8>)
 80006b6:	54d1      	strb	r1, [r2, r3]
 80006b8:	e000      	b.n	80006bc <ssd1306_DrawPixel+0xdc>
		return;
 80006ba:	bf00      	nop
	}
}
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000084 	.word	0x20000084
 80006c8:	2000008c 	.word	0x2000008c

080006cc <ssd1306_DrawLine>:


void ssd1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4604      	mov	r4, r0
 80006d4:	4608      	mov	r0, r1
 80006d6:	4611      	mov	r1, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	4623      	mov	r3, r4
 80006dc:	80fb      	strh	r3, [r7, #6]
 80006de:	4603      	mov	r3, r0
 80006e0:	80bb      	strh	r3, [r7, #4]
 80006e2:	460b      	mov	r3, r1
 80006e4:	807b      	strh	r3, [r7, #2]
 80006e6:	4613      	mov	r3, r2
 80006e8:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80006ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80006ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006fc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000704:	1acb      	subs	r3, r1, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	bfb8      	it	lt
 800070a:	425b      	neglt	r3, r3
 800070c:	429a      	cmp	r2, r3
 800070e:	bfcc      	ite	gt
 8000710:	2301      	movgt	r3, #1
 8000712:	2300      	movle	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	837b      	strh	r3, [r7, #26]
	if (steep)
 8000718:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00b      	beq.n	8000738 <ssd1306_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	833b      	strh	r3, [r7, #24]
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	80fb      	strh	r3, [r7, #6]
 8000728:	8b3b      	ldrh	r3, [r7, #24]
 800072a:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	82fb      	strh	r3, [r7, #22]
 8000730:	883b      	ldrh	r3, [r7, #0]
 8000732:	807b      	strh	r3, [r7, #2]
 8000734:	8afb      	ldrh	r3, [r7, #22]
 8000736:	803b      	strh	r3, [r7, #0]
	}


	if (x0 > x1)
 8000738:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800073c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000740:	429a      	cmp	r2, r3
 8000742:	dd0b      	ble.n	800075c <ssd1306_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	82bb      	strh	r3, [r7, #20]
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	80fb      	strh	r3, [r7, #6]
 800074c:	8abb      	ldrh	r3, [r7, #20]
 800074e:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	827b      	strh	r3, [r7, #18]
 8000754:	883b      	ldrh	r3, [r7, #0]
 8000756:	80bb      	strh	r3, [r7, #4]
 8000758:	8a7b      	ldrh	r3, [r7, #18]
 800075a:	803b      	strh	r3, [r7, #0]
	}


	int16_t dx, dy;
	dx = x1 - x0;
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	b29b      	uxth	r3, r3
 8000764:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8000766:	f9b7 2000 	ldrsh.w	r2, [r7]
 800076a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	bfb8      	it	lt
 8000774:	425b      	neglt	r3, r3
 8000776:	81fb      	strh	r3, [r7, #14]


	int16_t err = dx / 2;
 8000778:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800077c:	0fda      	lsrs	r2, r3, #31
 800077e:	4413      	add	r3, r2
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;


	if (y0 < y1)
 8000784:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000788:	f9b7 3000 	ldrsh.w	r3, [r7]
 800078c:	429a      	cmp	r2, r3
 800078e:	da02      	bge.n	8000796 <ssd1306_DrawLine+0xca>
	{
		ystep = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	83bb      	strh	r3, [r7, #28]
 8000794:	e031      	b.n	80007fa <ssd1306_DrawLine+0x12e>
	}
	else
	{
		ystep = -1;
 8000796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079a:	83bb      	strh	r3, [r7, #28]
	}


	for (; x0<=x1; x0++)
 800079c:	e02d      	b.n	80007fa <ssd1306_DrawLine+0x12e>
	{
		if (steep)
 800079e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d008      	beq.n	80007b8 <ssd1306_DrawLine+0xec>
		{
			ssd1306_DrawPixel(y0, x0);
 80007a6:	88bb      	ldrh	r3, [r7, #4]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	88fa      	ldrh	r2, [r7, #6]
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff15 	bl	80005e0 <ssd1306_DrawPixel>
 80007b6:	e007      	b.n	80007c8 <ssd1306_DrawLine+0xfc>
		}
		else
		{
			ssd1306_DrawPixel(x0, y0);
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	88ba      	ldrh	r2, [r7, #4]
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff0c 	bl	80005e0 <ssd1306_DrawPixel>
		}
		err -= dy;
 80007c8:	8bfa      	ldrh	r2, [r7, #30]
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 80007d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da09      	bge.n	80007ee <ssd1306_DrawLine+0x122>
		{
			y0 += ystep;
 80007da:	88ba      	ldrh	r2, [r7, #4]
 80007dc:	8bbb      	ldrh	r3, [r7, #28]
 80007de:	4413      	add	r3, r2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80007e4:	8bfa      	ldrh	r2, [r7, #30]
 80007e6:	8a3b      	ldrh	r3, [r7, #16]
 80007e8:	4413      	add	r3, r2
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 80007ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	3301      	adds	r3, #1
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	80fb      	strh	r3, [r7, #6]
 80007fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000802:	429a      	cmp	r2, r3
 8000804:	ddcb      	ble.n	800079e <ssd1306_DrawLine+0xd2>
		}
	}
}
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	3724      	adds	r7, #36	; 0x24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}

08000810 <ssd1306_DrawTriangle>:
  }
}


void ssd1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	80bb      	strh	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	ssd1306_DrawLine(x1, y1, x2, y2);
 800082e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000832:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000836:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800083a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800083e:	f7ff ff45 	bl	80006cc <ssd1306_DrawLine>
	ssd1306_DrawLine(x2, y2, x3, y3);
 8000842:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000846:	f9b7 1000 	ldrsh.w	r1, [r7]
 800084a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800084e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000852:	f7ff ff3b 	bl	80006cc <ssd1306_DrawLine>
	ssd1306_DrawLine(x3, y3, x1, y1);
 8000856:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800085a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800085e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000862:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000866:	f7ff ff31 	bl	80006cc <ssd1306_DrawLine>
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bd90      	pop	{r4, r7, pc}

08000872 <ssd1306_DrawCircle>:
	}
}


void ssd1306_DrawCircle(int16_t x0, int16_t y0, int16_t radius)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	80fb      	strh	r3, [r7, #6]
 800087c:	460b      	mov	r3, r1
 800087e:	80bb      	strh	r3, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	807b      	strh	r3, [r7, #2]
	int16_t x = 0, y = radius;
 8000884:	2300      	movs	r3, #0
 8000886:	81fb      	strh	r3, [r7, #14]
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	81bb      	strh	r3, [r7, #12]
	int16_t dp = 1 - radius;
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	f1c3 0301 	rsb	r3, r3, #1
 8000892:	b29b      	uxth	r3, r3
 8000894:	817b      	strh	r3, [r7, #10]
	do
	{
		if (dp < 0)
 8000896:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800089a:	2b00      	cmp	r3, #0
 800089c:	da0d      	bge.n	80008ba <ssd1306_DrawCircle+0x48>
			dp = dp + 2 * (++x) + 3;
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	3301      	adds	r3, #1
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	81fb      	strh	r3, [r7, #14]
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	897b      	ldrh	r3, [r7, #10]
 80008ae:	4413      	add	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	3303      	adds	r3, #3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	817b      	strh	r3, [r7, #10]
 80008b8:	e015      	b.n	80008e6 <ssd1306_DrawCircle+0x74>
		else
			dp = dp + 2 * (++x) - 2 * (--y) + 5;
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	3301      	adds	r3, #1
 80008be:	b29b      	uxth	r3, r3
 80008c0:	81fb      	strh	r3, [r7, #14]
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	897b      	ldrh	r3, [r7, #10]
 80008ca:	4413      	add	r3, r2
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	89bb      	ldrh	r3, [r7, #12]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	81bb      	strh	r3, [r7, #12]
 80008d6:	89bb      	ldrh	r3, [r7, #12]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	b29b      	uxth	r3, r3
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	b29b      	uxth	r3, r3
 80008e0:	3305      	adds	r3, #5
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	817b      	strh	r3, [r7, #10]


		ssd1306_DrawPixel(x0 + x, y0 + y);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4413      	add	r3, r2
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	89bb      	ldrh	r3, [r7, #12]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4413      	add	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	f7ff fe6e 	bl	80005e0 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - x, y0 + y);
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	89fb      	ldrh	r3, [r7, #14]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	b2d8      	uxtb	r0, r3
 8000910:	88bb      	ldrh	r3, [r7, #4]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	89bb      	ldrh	r3, [r7, #12]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4413      	add	r3, r2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4619      	mov	r1, r3
 800091e:	f7ff fe5f 	bl	80005e0 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 + x, y0 - y);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	89fb      	ldrh	r3, [r7, #14]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4413      	add	r3, r2
 800092c:	b2d8      	uxtb	r0, r3
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	89bb      	ldrh	r3, [r7, #12]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4619      	mov	r1, r3
 800093c:	f7ff fe50 	bl	80005e0 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - x, y0 - y);
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	b2d8      	uxtb	r0, r3
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	89bb      	ldrh	r3, [r7, #12]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	f7ff fe41 	bl	80005e0 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 + y, y0 + x);
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	89bb      	ldrh	r3, [r7, #12]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	b2d8      	uxtb	r0, r3
 800096a:	88bb      	ldrh	r3, [r7, #4]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4413      	add	r3, r2
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4619      	mov	r1, r3
 8000978:	f7ff fe32 	bl	80005e0 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - y, y0 + x);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	89bb      	ldrh	r3, [r7, #12]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	b2d8      	uxtb	r0, r3
 8000988:	88bb      	ldrh	r3, [r7, #4]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	f7ff fe23 	bl	80005e0 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 + y, y0 - x);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	89bb      	ldrh	r3, [r7, #12]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4413      	add	r3, r2
 80009a4:	b2d8      	uxtb	r0, r3
 80009a6:	88bb      	ldrh	r3, [r7, #4]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	f7ff fe14 	bl	80005e0 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - y, y0 - x);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	89bb      	ldrh	r3, [r7, #12]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	b2d8      	uxtb	r0, r3
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	89fb      	ldrh	r3, [r7, #14]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff fe05 	bl	80005e0 <ssd1306_DrawPixel>


	} while (x < y);
 80009d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009de:	429a      	cmp	r2, r3
 80009e0:	f6ff af59 	blt.w	8000896 <ssd1306_DrawCircle+0x24>


	ssd1306_DrawPixel(x0 + radius, y0);
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	88ba      	ldrh	r2, [r7, #4]
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdf2 	bl	80005e0 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x0, y0 + radius);
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	b2d8      	uxtb	r0, r3
 8000a00:	88bb      	ldrh	r3, [r7, #4]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f7ff fde7 	bl	80005e0 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x0 - radius, y0);
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	88ba      	ldrh	r2, [r7, #4]
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fddb 	bl	80005e0 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x0, y0 - radius);
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	b2d8      	uxtb	r0, r3
 8000a2e:	88bb      	ldrh	r3, [r7, #4]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fdd0 	bl	80005e0 <ssd1306_DrawPixel>
}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <ssd1306_WriteChar>:
	}
}


char ssd1306_WriteChar(char ch, FontDef Font)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	e883 0006 	stmia.w	r3, {r1, r2}
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;


	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000a58:	f7ff fc95 	bl	8000386 <width>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	793b      	ldrb	r3, [r7, #4]
 8000a68:	440b      	add	r3, r1
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dd0a      	ble.n	8000a84 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8000a6e:	f7ff fc91 	bl	8000394 <height>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000a78:	885b      	ldrh	r3, [r3, #2]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	797b      	ldrb	r3, [r7, #5]
 8000a7e:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dc01      	bgt.n	8000a88 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e06a      	b.n	8000b5e <ssd1306_WriteChar+0x116>
	}


	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e059      	b.n	8000b42 <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	3b20      	subs	r3, #32
 8000a94:	7979      	ldrb	r1, [r7, #5]
 8000a96:	fb01 f303 	mul.w	r3, r1, r3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	e041      	b.n	8000b32 <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d011      	beq.n	8000ae2 <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2d8      	uxtb	r0, r3
 8000acc:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	f7ff fd80 	bl	80005e0 <ssd1306_DrawPixel>
 8000ae0:	e024      	b.n	8000b2c <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000ae4:	795b      	ldrb	r3, [r3, #5]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000af4:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4413      	add	r3, r2
 8000b02:	b2d8      	uxtb	r0, r3
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000b06:	885b      	ldrh	r3, [r3, #2]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4413      	add	r3, r2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4619      	mov	r1, r3
 8000b14:	f7ff fd64 	bl	80005e0 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000b1a:	795b      	ldrb	r3, [r3, #5]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2301      	moveq	r3, #1
 8000b22:	2300      	movne	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000b2a:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	461a      	mov	r2, r3
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d3b8      	bcc.n	8000aae <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	797b      	ldrb	r3, [r7, #5]
 8000b44:	461a      	mov	r2, r3
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d3a0      	bcc.n	8000a8e <ssd1306_WriteChar+0x46>
		}
	}


	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000b4e:	881a      	ldrh	r2, [r3, #0]
 8000b50:	793b      	ldrb	r3, [r7, #4]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <ssd1306_WriteChar+0x120>)
 8000b5a:	801a      	strh	r2, [r3, #0]


	// Return written char for validation
	return ch;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000084 	.word	0x20000084

08000b6c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 8000b7a:	e012      	b.n	8000ba2 <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	7818      	ldrb	r0, [r3, #0]
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b86:	f7ff ff5f 	bl	8000a48 <ssd1306_WriteChar>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d002      	beq.n	8000b9c <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	e008      	b.n	8000bae <ssd1306_WriteString+0x42>
		}


		// Next char
		str++;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1e8      	bne.n	8000b7c <ssd1306_WriteString+0x10>
	}


	// Everything ok
	return *str;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	781b      	ldrb	r3, [r3, #0]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <ssd1306_SetCursor+0x2c>)
 8000bce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <ssd1306_SetCursor+0x2c>)
 8000bd6:	805a      	strh	r2, [r3, #2]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000084 	.word	0x20000084

08000be8 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8000bec:	20a1      	movs	r0, #161	; 0xa1
 8000bee:	f000 f811 	bl	8000c14 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8000bf2:	20c8      	movs	r0, #200	; 0xc8
 8000bf4:	f000 f80e 	bl	8000c14 <ssd1306_WriteCommand>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8000c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c04:	2100      	movs	r1, #0
 8000c06:	4802      	ldr	r0, [pc, #8]	; (8000c10 <ssd1306_Clear+0x14>)
 8000c08:	f001 fde0 	bl	80027cc <memset>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af04      	add	r7, sp, #16
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000c1e:	230a      	movs	r3, #10
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	2301      	movs	r3, #1
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2178      	movs	r1, #120	; 0x78
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <ssd1306_WriteCommand+0x2c>)
 8000c32:	f000 fd15 	bl	8001660 <HAL_I2C_Mem_Write>
#endif
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000030 	.word	0x20000030

08000c44 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af04      	add	r7, sp, #16
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	2240      	movs	r2, #64	; 0x40
 8000c60:	2178      	movs	r1, #120	; 0x78
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <ssd1306_WriteData+0x2c>)
 8000c64:	f000 fcfc 	bl	8001660 <HAL_I2C_Mem_Write>
#endif
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000030 	.word	0x20000030

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_MspInit+0x60>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_MspInit+0x60>)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_I2C_MspInit+0x70>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d123      	bne.n	8000d40 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_I2C_MspInit+0x74>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <HAL_I2C_MspInit+0x74>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d10:	23c0      	movs	r3, #192	; 0xc0
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d14:	2312      	movs	r3, #18
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <HAL_I2C_MspInit+0x78>)
 8000d24:	f000 f9d4 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d32:	61d3      	str	r3, [r2, #28]
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f875 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fff7 	bl	8000da2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000db6:	490c      	ldr	r1, [pc, #48]	; (8000de8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dcc:	4c09      	ldr	r4, [pc, #36]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f001 fcd3 	bl	8002784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff f9b5 	bl	800014c <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dec:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 8000df0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000df4:	20000494 	.word	0x20000494

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f92b 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff ff2c 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f935 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e64:	f000 f90b 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000010 	.word	0x20000010
 8000e84:	2000000c 	.word	0x2000000c

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	20000490 	.word	0x20000490

08000eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000490 	.word	0x20000490

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fff0 	bl	8000eac <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffe0 	bl	8000eac <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000010 	.word	0x20000010

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001048:	f7ff ff90 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff49 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff5e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff90 	bl	8000fc0 <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5f 	bl	8000f6c <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb0 	bl	8001024 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b08b      	sub	sp, #44	; 0x2c
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	e169      	b.n	80013b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e4:	2201      	movs	r2, #1
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8158 	bne.w	80013b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4a9a      	ldr	r2, [pc, #616]	; (8001370 <HAL_GPIO_Init+0x2a0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d05e      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 800110c:	4a98      	ldr	r2, [pc, #608]	; (8001370 <HAL_GPIO_Init+0x2a0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d875      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001112:	4a98      	ldr	r2, [pc, #608]	; (8001374 <HAL_GPIO_Init+0x2a4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d058      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001118:	4a96      	ldr	r2, [pc, #600]	; (8001374 <HAL_GPIO_Init+0x2a4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d86f      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800111e:	4a96      	ldr	r2, [pc, #600]	; (8001378 <HAL_GPIO_Init+0x2a8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d052      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001124:	4a94      	ldr	r2, [pc, #592]	; (8001378 <HAL_GPIO_Init+0x2a8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d869      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800112a:	4a94      	ldr	r2, [pc, #592]	; (800137c <HAL_GPIO_Init+0x2ac>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d04c      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001130:	4a92      	ldr	r2, [pc, #584]	; (800137c <HAL_GPIO_Init+0x2ac>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d863      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001136:	4a92      	ldr	r2, [pc, #584]	; (8001380 <HAL_GPIO_Init+0x2b0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d046      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 800113c:	4a90      	ldr	r2, [pc, #576]	; (8001380 <HAL_GPIO_Init+0x2b0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d85d      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001142:	2b12      	cmp	r3, #18
 8001144:	d82a      	bhi.n	800119c <HAL_GPIO_Init+0xcc>
 8001146:	2b12      	cmp	r3, #18
 8001148:	d859      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <HAL_GPIO_Init+0x80>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	080011cb 	.word	0x080011cb
 8001154:	080011a5 	.word	0x080011a5
 8001158:	080011b7 	.word	0x080011b7
 800115c:	080011f9 	.word	0x080011f9
 8001160:	080011ff 	.word	0x080011ff
 8001164:	080011ff 	.word	0x080011ff
 8001168:	080011ff 	.word	0x080011ff
 800116c:	080011ff 	.word	0x080011ff
 8001170:	080011ff 	.word	0x080011ff
 8001174:	080011ff 	.word	0x080011ff
 8001178:	080011ff 	.word	0x080011ff
 800117c:	080011ff 	.word	0x080011ff
 8001180:	080011ff 	.word	0x080011ff
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011ff 	.word	0x080011ff
 800118c:	080011ff 	.word	0x080011ff
 8001190:	080011ff 	.word	0x080011ff
 8001194:	080011ad 	.word	0x080011ad
 8001198:	080011c1 	.word	0x080011c1
 800119c:	4a79      	ldr	r2, [pc, #484]	; (8001384 <HAL_GPIO_Init+0x2b4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011a2:	e02c      	b.n	80011fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e029      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	3304      	adds	r3, #4
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e024      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	3308      	adds	r3, #8
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e01f      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	330c      	adds	r3, #12
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e01a      	b.n	8001200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011d2:	2304      	movs	r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e013      	b.n	8001200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e0:	2308      	movs	r3, #8
 80011e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	611a      	str	r2, [r3, #16]
          break;
 80011ea:	e009      	b.n	8001200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ec:	2308      	movs	r3, #8
 80011ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	615a      	str	r2, [r3, #20]
          break;
 80011f6:	e003      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x130>
          break;
 80011fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2bff      	cmp	r3, #255	; 0xff
 8001204:	d801      	bhi.n	800120a <HAL_GPIO_Init+0x13a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	e001      	b.n	800120e <HAL_GPIO_Init+0x13e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d802      	bhi.n	800121c <HAL_GPIO_Init+0x14c>
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x152>
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	3b08      	subs	r3, #8
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	210f      	movs	r1, #15
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	6a39      	ldr	r1, [r7, #32]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80b1 	beq.w	80013b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001250:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x2b8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x2b8>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <HAL_GPIO_Init+0x2b8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001268:	4a48      	ldr	r2, [pc, #288]	; (800138c <HAL_GPIO_Init+0x2bc>)
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a40      	ldr	r2, [pc, #256]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d013      	beq.n	80012bc <HAL_GPIO_Init+0x1ec>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3f      	ldr	r2, [pc, #252]	; (8001394 <HAL_GPIO_Init+0x2c4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d00d      	beq.n	80012b8 <HAL_GPIO_Init+0x1e8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3e      	ldr	r2, [pc, #248]	; (8001398 <HAL_GPIO_Init+0x2c8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d007      	beq.n	80012b4 <HAL_GPIO_Init+0x1e4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3d      	ldr	r2, [pc, #244]	; (800139c <HAL_GPIO_Init+0x2cc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_GPIO_Init+0x1e0>
 80012ac:	2303      	movs	r3, #3
 80012ae:	e006      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012b0:	2304      	movs	r3, #4
 80012b2:	e004      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012bc:	2300      	movs	r3, #0
 80012be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c0:	f002 0203 	and.w	r2, r2, #3
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	4093      	lsls	r3, r2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ce:	492f      	ldr	r1, [pc, #188]	; (800138c <HAL_GPIO_Init+0x2bc>)
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	492c      	ldr	r1, [pc, #176]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4928      	ldr	r1, [pc, #160]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001300:	4013      	ands	r3, r2
 8001302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	4922      	ldr	r1, [pc, #136]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	60cb      	str	r3, [r1, #12]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	491e      	ldr	r1, [pc, #120]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4918      	ldr	r1, [pc, #96]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	4914      	ldr	r1, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d021      	beq.n	80013a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
 800136c:	e021      	b.n	80013b2 <HAL_GPIO_Init+0x2e2>
 800136e:	bf00      	nop
 8001370:	10320000 	.word	0x10320000
 8001374:	10310000 	.word	0x10310000
 8001378:	10220000 	.word	0x10220000
 800137c:	10210000 	.word	0x10210000
 8001380:	10120000 	.word	0x10120000
 8001384:	10110000 	.word	0x10110000
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000
 8001390:	40010800 	.word	0x40010800
 8001394:	40010c00 	.word	0x40010c00
 8001398:	40011000 	.word	0x40011000
 800139c:	40011400 	.word	0x40011400
 80013a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_GPIO_Init+0x304>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	4909      	ldr	r1, [pc, #36]	; (80013d4 <HAL_GPIO_Init+0x304>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	3301      	adds	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f47f ae8e 	bne.w	80010e4 <HAL_GPIO_Init+0x14>
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	372c      	adds	r7, #44	; 0x2c
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e12b      	b.n	8001642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fc6a 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2224      	movs	r2, #36	; 0x24
 8001408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800142a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800143a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800143c:	f001 f970 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a81      	ldr	r2, [pc, #516]	; (800164c <HAL_I2C_Init+0x274>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d807      	bhi.n	800145c <HAL_I2C_Init+0x84>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a80      	ldr	r2, [pc, #512]	; (8001650 <HAL_I2C_Init+0x278>)
 8001450:	4293      	cmp	r3, r2
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	e006      	b.n	800146a <HAL_I2C_Init+0x92>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a7d      	ldr	r2, [pc, #500]	; (8001654 <HAL_I2C_Init+0x27c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	bf94      	ite	ls
 8001464:	2301      	movls	r3, #1
 8001466:	2300      	movhi	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0e7      	b.n	8001642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4a78      	ldr	r2, [pc, #480]	; (8001658 <HAL_I2C_Init+0x280>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a6a      	ldr	r2, [pc, #424]	; (800164c <HAL_I2C_Init+0x274>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d802      	bhi.n	80014ac <HAL_I2C_Init+0xd4>
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3301      	adds	r3, #1
 80014aa:	e009      	b.n	80014c0 <HAL_I2C_Init+0xe8>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	4a69      	ldr	r2, [pc, #420]	; (800165c <HAL_I2C_Init+0x284>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	3301      	adds	r3, #1
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	495c      	ldr	r1, [pc, #368]	; (800164c <HAL_I2C_Init+0x274>)
 80014dc:	428b      	cmp	r3, r1
 80014de:	d819      	bhi.n	8001514 <HAL_I2C_Init+0x13c>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1e59      	subs	r1, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ee:	1c59      	adds	r1, r3, #1
 80014f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014f4:	400b      	ands	r3, r1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <HAL_I2C_Init+0x138>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1e59      	subs	r1, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fbb1 f3f3 	udiv	r3, r1, r3
 8001508:	3301      	adds	r3, #1
 800150a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150e:	e051      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 8001510:	2304      	movs	r3, #4
 8001512:	e04f      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d111      	bne.n	8001540 <HAL_I2C_Init+0x168>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	440b      	add	r3, r1
 800152a:	fbb0 f3f3 	udiv	r3, r0, r3
 800152e:	3301      	adds	r3, #1
 8001530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	e012      	b.n	8001566 <HAL_I2C_Init+0x18e>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e58      	subs	r0, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	0099      	lsls	r1, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	fbb0 f3f3 	udiv	r3, r0, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Init+0x196>
 800156a:	2301      	movs	r3, #1
 800156c:	e022      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10e      	bne.n	8001594 <HAL_I2C_Init+0x1bc>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1e58      	subs	r0, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6859      	ldr	r1, [r3, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	fbb0 f3f3 	udiv	r3, r0, r3
 8001588:	3301      	adds	r3, #1
 800158a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001592:	e00f      	b.n	80015b4 <HAL_I2C_Init+0x1dc>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	0099      	lsls	r1, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	6809      	ldr	r1, [r1, #0]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6911      	ldr	r1, [r2, #16]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	4311      	orrs	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	000186a0 	.word	0x000186a0
 8001650:	001e847f 	.word	0x001e847f
 8001654:	003d08ff 	.word	0x003d08ff
 8001658:	431bde83 	.word	0x431bde83
 800165c:	10624dd3 	.word	0x10624dd3

08001660 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4603      	mov	r3, r0
 8001670:	817b      	strh	r3, [r7, #10]
 8001672:	460b      	mov	r3, r1
 8001674:	813b      	strh	r3, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800167a:	f7ff fc17 	bl	8000eac <HAL_GetTick>
 800167e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b20      	cmp	r3, #32
 800168a:	f040 80d9 	bne.w	8001840 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2319      	movs	r3, #25
 8001694:	2201      	movs	r2, #1
 8001696:	496d      	ldr	r1, [pc, #436]	; (800184c <HAL_I2C_Mem_Write+0x1ec>)
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 fa9f 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0cc      	b.n	8001842 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_I2C_Mem_Write+0x56>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e0c5      	b.n	8001842 <HAL_I2C_Mem_Write+0x1e2>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d007      	beq.n	80016dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2221      	movs	r2, #33	; 0x21
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2240      	movs	r2, #64	; 0x40
 80016f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800170c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a4d      	ldr	r2, [pc, #308]	; (8001850 <HAL_I2C_Mem_Write+0x1f0>)
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800171e:	88f8      	ldrh	r0, [r7, #6]
 8001720:	893a      	ldrh	r2, [r7, #8]
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4603      	mov	r3, r0
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f9be 	bl	8001ab0 <I2C_RequestMemoryWrite>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d052      	beq.n	80017e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e081      	b.n	8001842 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fb64 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00d      	beq.n	800176a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b04      	cmp	r3, #4
 8001754:	d107      	bne.n	8001766 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d11b      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x180>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d017      	beq.n	80017e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1aa      	bne.n	800173e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 fb57 	bl	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00d      	beq.n	8001814 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d107      	bne.n	8001810 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e016      	b.n	8001842 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001840:	2302      	movs	r3, #2
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	00100002 	.word	0x00100002
 8001850:	ffff0000 	.word	0xffff0000

08001854 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	460b      	mov	r3, r1
 8001862:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff fb22 	bl	8000eac <HAL_GetTick>
 8001868:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b20      	cmp	r3, #32
 8001878:	f040 8111 	bne.w	8001a9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2319      	movs	r3, #25
 8001882:	2201      	movs	r2, #1
 8001884:	4988      	ldr	r1, [pc, #544]	; (8001aa8 <HAL_I2C_IsDeviceReady+0x254>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f9a8 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
 8001894:	e104      	b.n	8001aa0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_I2C_IsDeviceReady+0x50>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0fd      	b.n	8001aa0 <HAL_I2C_IsDeviceReady+0x24c>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d007      	beq.n	80018ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2224      	movs	r2, #36	; 0x24
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a70      	ldr	r2, [pc, #448]	; (8001aac <HAL_I2C_IsDeviceReady+0x258>)
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f966 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001924:	d103      	bne.n	800192e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e0b6      	b.n	8001aa0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001940:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff fab3 	bl	8000eac <HAL_GetTick>
 8001946:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b02      	cmp	r3, #2
 8001954:	bf0c      	ite	eq
 8001956:	2301      	moveq	r3, #1
 8001958:	2300      	movne	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001976:	e025      	b.n	80019c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001978:	f7ff fa98 	bl	8000eac <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d302      	bcc.n	800198e <HAL_I2C_IsDeviceReady+0x13a>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	22a0      	movs	r2, #160	; 0xa0
 8001992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2ba0      	cmp	r3, #160	; 0xa0
 80019ce:	d005      	beq.n	80019dc <HAL_I2C_IsDeviceReady+0x188>
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_I2C_IsDeviceReady+0x188>
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0cd      	beq.n	8001978 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d129      	bne.n	8001a46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2319      	movs	r3, #25
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <HAL_I2C_IsDeviceReady+0x254>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f8da 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e036      	b.n	8001aa0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e02c      	b.n	8001aa0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2319      	movs	r3, #25
 8001a66:	2201      	movs	r2, #1
 8001a68:	490f      	ldr	r1, [pc, #60]	; (8001aa8 <HAL_I2C_IsDeviceReady+0x254>)
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f8b6 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e012      	b.n	8001aa0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f4ff af32 	bcc.w	80018ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a9e:	2302      	movs	r3, #2
  }
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	00100002 	.word	0x00100002
 8001aac:	ffff0000 	.word	0xffff0000

08001ab0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	817b      	strh	r3, [r7, #10]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	813b      	strh	r3, [r7, #8]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f878 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00d      	beq.n	8001b0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b00:	d103      	bne.n	8001b0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e05f      	b.n	8001bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	6a3a      	ldr	r2, [r7, #32]
 8001b22:	492d      	ldr	r1, [pc, #180]	; (8001bd8 <I2C_RequestMemoryWrite+0x128>)
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f8d3 	bl	8001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e04c      	b.n	8001bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	6a39      	ldr	r1, [r7, #32]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f95e 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d107      	bne.n	8001b72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e02b      	b.n	8001bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	e021      	b.n	8001bcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b88:	893b      	ldrh	r3, [r7, #8]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f938 	bl	8001e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d107      	bne.n	8001bbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e005      	b.n	8001bce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc2:	893b      	ldrh	r3, [r7, #8]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	00010002 	.word	0x00010002

08001bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bec:	e048      	b.n	8001c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf4:	d044      	beq.n	8001c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff f959 	bl	8000eac <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d139      	bne.n	8001c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10d      	bne.n	8001c32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	4013      	ands	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	e00c      	b.n	8001c4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d116      	bne.n	8001c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e023      	b.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10d      	bne.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	e00c      	b.n	8001cc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	43da      	mvns	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d093      	beq.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cde:	e071      	b.n	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d123      	bne.n	8001d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f043 0204 	orr.w	r2, r3, #4
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e067      	b.n	8001e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3e:	d041      	beq.n	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d40:	f7ff f8b4 	bl	8000eac <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d302      	bcc.n	8001d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d136      	bne.n	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10c      	bne.n	8001d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	e00b      	b.n	8001d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	43da      	mvns	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d016      	beq.n	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e021      	b.n	8001e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10c      	bne.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e00b      	b.n	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4013      	ands	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf14      	ite	ne
 8001dfa:	2301      	movne	r3, #1
 8001dfc:	2300      	moveq	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f af6d 	bne.w	8001ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e1c:	e034      	b.n	8001e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f886 	bl	8001f30 <I2C_IsAcknowledgeFailed>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e034      	b.n	8001e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e34:	d028      	beq.n	8001e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e36:	f7ff f839 	bl	8000eac <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d302      	bcc.n	8001e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d11d      	bne.n	8001e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d016      	beq.n	8001e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f043 0220 	orr.w	r2, r3, #32
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e007      	b.n	8001e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	2b80      	cmp	r3, #128	; 0x80
 8001e94:	d1c3      	bne.n	8001e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001eac:	e034      	b.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f83e 	bl	8001f30 <I2C_IsAcknowledgeFailed>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e034      	b.n	8001f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec4:	d028      	beq.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec6:	f7fe fff1 	bl	8000eac <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d302      	bcc.n	8001edc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11d      	bne.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d016      	beq.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d1c3      	bne.n	8001eae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f46:	d11b      	bne.n	8001f80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e272      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8087 	beq.w	80020ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fac:	4b92      	ldr	r3, [pc, #584]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d00c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb8:	4b8f      	ldr	r3, [pc, #572]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d112      	bne.n	8001fea <HAL_RCC_OscConfig+0x5e>
 8001fc4:	4b8c      	ldr	r3, [pc, #560]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd0:	d10b      	bne.n	8001fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd2:	4b89      	ldr	r3, [pc, #548]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d06c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x12c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d168      	bne.n	80020b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e24c      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x76>
 8001ff4:	4b80      	ldr	r3, [pc, #512]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7f      	ldr	r2, [pc, #508]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e02e      	b.n	8002060 <HAL_RCC_OscConfig+0xd4>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x98>
 800200a:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7a      	ldr	r2, [pc, #488]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b78      	ldr	r3, [pc, #480]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a77      	ldr	r2, [pc, #476]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e01d      	b.n	8002060 <HAL_RCC_OscConfig+0xd4>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0xbc>
 800202e:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a71      	ldr	r2, [pc, #452]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6e      	ldr	r2, [pc, #440]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0xd4>
 8002048:	4b6b      	ldr	r3, [pc, #428]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6a      	ldr	r2, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a67      	ldr	r2, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800205a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe ff20 	bl	8000eac <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7fe ff1c 	bl	8000eac <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e200      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0xe4>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe ff0c 	bl	8000eac <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe ff08 	bl	8000eac <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1ec      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x10c>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d063      	beq.n	800218e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020d2:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d11c      	bne.n	8002118 <HAL_RCC_OscConfig+0x18c>
 80020de:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x176>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1c0      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4939      	ldr	r1, [pc, #228]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e03a      	b.n	800218e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_OscConfig+0x270>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fec1 	bl	8000eac <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212e:	f7fe febd 	bl	8000eac <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1a1      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4927      	ldr	r1, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_RCC_OscConfig+0x270>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe fea0 	bl	8000eac <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002170:	f7fe fe9c 	bl	8000eac <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e180      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03a      	beq.n	8002210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d019      	beq.n	80021d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7fe fe80 	bl	8000eac <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7fe fe7c 	bl	8000eac <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e160      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f000 faba 	bl	8002748 <RCC_Delay>
 80021d4:	e01c      	b.n	8002210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7fe fe66 	bl	8000eac <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e2:	e00f      	b.n	8002204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7fe fe62 	bl	8000eac <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d908      	bls.n	8002204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e146      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	42420000 	.word	0x42420000
 8002200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b92      	ldr	r3, [pc, #584]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e9      	bne.n	80021e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a6 	beq.w	800236a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b8b      	ldr	r3, [pc, #556]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b88      	ldr	r3, [pc, #544]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a87      	ldr	r2, [pc, #540]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]
 800223a:	4b85      	ldr	r3, [pc, #532]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b82      	ldr	r3, [pc, #520]	; (8002454 <HAL_RCC_OscConfig+0x4c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002256:	4b7f      	ldr	r3, [pc, #508]	; (8002454 <HAL_RCC_OscConfig+0x4c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7e      	ldr	r2, [pc, #504]	; (8002454 <HAL_RCC_OscConfig+0x4c8>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002262:	f7fe fe23 	bl	8000eac <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe fe1f 	bl	8000eac <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	; 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e103      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b75      	ldr	r3, [pc, #468]	; (8002454 <HAL_RCC_OscConfig+0x4c8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x312>
 8002290:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a6e      	ldr	r2, [pc, #440]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	e02d      	b.n	80022fa <HAL_RCC_OscConfig+0x36e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x334>
 80022a6:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a69      	ldr	r2, [pc, #420]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a66      	ldr	r2, [pc, #408]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	e01c      	b.n	80022fa <HAL_RCC_OscConfig+0x36e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x356>
 80022c8:	4b61      	ldr	r3, [pc, #388]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a60      	ldr	r2, [pc, #384]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	4b5e      	ldr	r3, [pc, #376]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a5d      	ldr	r2, [pc, #372]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	e00b      	b.n	80022fa <HAL_RCC_OscConfig+0x36e>
 80022e2:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b58      	ldr	r3, [pc, #352]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a57      	ldr	r2, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d015      	beq.n	800232e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe fdd3 	bl	8000eac <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe fdcf 	bl	8000eac <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0b1      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ee      	beq.n	800230a <HAL_RCC_OscConfig+0x37e>
 800232c:	e014      	b.n	8002358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7fe fdbd 	bl	8000eac <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fdb9 	bl	8000eac <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e09b      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	4b40      	ldr	r3, [pc, #256]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ee      	bne.n	8002336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d061      	beq.n	8002444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d146      	bne.n	8002416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b33      	ldr	r3, [pc, #204]	; (8002458 <HAL_RCC_OscConfig+0x4cc>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fe fd8d 	bl	8000eac <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fd89 	bl	8000eac <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e06d      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d108      	bne.n	80023d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4921      	ldr	r1, [pc, #132]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a19      	ldr	r1, [r3, #32]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	430b      	orrs	r3, r1
 80023e2:	491b      	ldr	r1, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fd5d 	bl	8000eac <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f6:	f7fe fd59 	bl	8000eac <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e03d      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x46a>
 8002414:	e035      	b.n	8002482 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_RCC_OscConfig+0x4cc>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fd46 	bl	8000eac <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fd42 	bl	8000eac <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e026      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x498>
 8002442:	e01e      	b.n	8002482 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e019      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_OscConfig+0x500>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0d0      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	4965      	ldr	r1, [pc, #404]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0b8      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a58      	ldr	r2, [pc, #352]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a52      	ldr	r2, [pc, #328]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800250e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002510:	4b50      	ldr	r3, [pc, #320]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	494d      	ldr	r1, [pc, #308]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d040      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e07f      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e073      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06b      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4936      	ldr	r1, [pc, #216]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe fc94 	bl	8000eac <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe fc90 	bl	8000eac <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e053      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d210      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	4922      	ldr	r1, [pc, #136]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e032      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4916      	ldr	r1, [pc, #88]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	490e      	ldr	r1, [pc, #56]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261e:	f000 f821 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8002622:	4602      	mov	r2, r0
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	490a      	ldr	r1, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	5ccb      	ldrb	r3, [r1, r3]
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	4a09      	ldr	r2, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1cc>)
 8002638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fbf2 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
 8002658:	08002f70 	.word	0x08002f70
 800265c:	20000008 	.word	0x20000008
 8002660:	2000000c 	.word	0x2000000c

08002664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b04      	cmp	r3, #4
 800268c:	d002      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x30>
 800268e:	2b08      	cmp	r3, #8
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x36>
 8002692:	e027      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	e027      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	0c9b      	lsrs	r3, r3, #18
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0c5b      	lsrs	r3, r3, #17
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_RCC_GetSysClockFreq+0x98>)
 80026c6:	fb03 f202 	mul.w	r2, r3, r2
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e004      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	613b      	str	r3, [r7, #16]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetSysClockFreq+0x98>)
 80026e6:	613b      	str	r3, [r7, #16]
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	693b      	ldr	r3, [r7, #16]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	08002f88 	.word	0x08002f88
 8002704:	08002f98 	.word	0x08002f98
 8002708:	003d0900 	.word	0x003d0900

0800270c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002710:	4b02      	ldr	r3, [pc, #8]	; (800271c <HAL_RCC_GetHCLKFreq+0x10>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	20000008 	.word	0x20000008

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002724:	f7ff fff2 	bl	800270c <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08002f80 	.word	0x08002f80

08002748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <RCC_Delay+0x34>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <RCC_Delay+0x38>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0a5b      	lsrs	r3, r3, #9
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002764:	bf00      	nop
  }
  while (Delay --);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f9      	bne.n	8002764 <RCC_Delay+0x1c>
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	20000008 	.word	0x20000008
 8002780:	10624dd3 	.word	0x10624dd3

08002784 <__libc_init_array>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	2600      	movs	r6, #0
 8002788:	4d0c      	ldr	r5, [pc, #48]	; (80027bc <__libc_init_array+0x38>)
 800278a:	4c0d      	ldr	r4, [pc, #52]	; (80027c0 <__libc_init_array+0x3c>)
 800278c:	1b64      	subs	r4, r4, r5
 800278e:	10a4      	asrs	r4, r4, #2
 8002790:	42a6      	cmp	r6, r4
 8002792:	d109      	bne.n	80027a8 <__libc_init_array+0x24>
 8002794:	f000 f822 	bl	80027dc <_init>
 8002798:	2600      	movs	r6, #0
 800279a:	4d0a      	ldr	r5, [pc, #40]	; (80027c4 <__libc_init_array+0x40>)
 800279c:	4c0a      	ldr	r4, [pc, #40]	; (80027c8 <__libc_init_array+0x44>)
 800279e:	1b64      	subs	r4, r4, r5
 80027a0:	10a4      	asrs	r4, r4, #2
 80027a2:	42a6      	cmp	r6, r4
 80027a4:	d105      	bne.n	80027b2 <__libc_init_array+0x2e>
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ac:	4798      	blx	r3
 80027ae:	3601      	adds	r6, #1
 80027b0:	e7ee      	b.n	8002790 <__libc_init_array+0xc>
 80027b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b6:	4798      	blx	r3
 80027b8:	3601      	adds	r6, #1
 80027ba:	e7f2      	b.n	80027a2 <__libc_init_array+0x1e>
 80027bc:	08002f9c 	.word	0x08002f9c
 80027c0:	08002f9c 	.word	0x08002f9c
 80027c4:	08002f9c 	.word	0x08002f9c
 80027c8:	08002fa0 	.word	0x08002fa0

080027cc <memset>:
 80027cc:	4603      	mov	r3, r0
 80027ce:	4402      	add	r2, r0
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d100      	bne.n	80027d6 <memset+0xa>
 80027d4:	4770      	bx	lr
 80027d6:	f803 1b01 	strb.w	r1, [r3], #1
 80027da:	e7f9      	b.n	80027d0 <memset+0x4>

080027dc <_init>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr

080027e8 <_fini>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	bf00      	nop
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr
